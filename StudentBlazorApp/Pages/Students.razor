@page "/students"
@using StudentBlazorApp.Models
@inject HttpClient httpClient

<h1>Students</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a href="/add">
    <button class="btn btn-success">Add Speaker</button>
</a>
    <table class='table table-hover'>
    <thead>
        <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in students)
            {
                <tr>
                    <td>@item.StudentId</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td><a class="btn btn-success btn-sm" href="/edit/@item.StudentId">edit</a>
                    </td>
                    <td><a class="btn btn-danger btn-sm" href="/delete/@item.StudentId">del</a>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@if (students != null && mode == MODE.Add) // Insert form // Insert form
{
    <EditForm Model="@student" OnValidSubmit="@HandleAdd">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText placeholder="First Name" id="firstName" @bind-Value="@student.FirstName" />
    <br />
    <InputText placeholder="Last Name" id="lastName" @bind-Value="@student.LastName" />
    <br />
    <button type="submit">Submit</button>
</EditForm>

    @code {
    private Student student = new Student();

    private async void HandleAdd()
    {
        string endpoint = $"{baseUrl}api/students";

        student.StudentId = Guid.NewGuid().ToString();

        await httpClient.PostAsJsonAsync(endpoint, student);

        await load();
        StateHasChanged(); // causes the page to get automatically refreshed
        mode = MODE.None;
    }

}
}

@if (students != null && mode == MODE.Edit) // Update
{
    <EditForm Model="@student" OnValidSubmit="@HandleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText placeholder="First Name" id="firstName" @bind-Value="@student.FirstName" />
    <br />
    <InputText placeholder="Last Name" id="lastName" @bind-Value="@student.LastName" />
    <br />
    <button type="submit" class="btn btn-success">Submit</button>

    @code {
        private async void HandleUpdate()
        {
            string endpoint = $"{baseUrl}api/students/{student.StudentId}";

            await httpClient.PutAsJsonAsync(endpoint, student);

            await load();
            mode = MODE.None;
            StateHasChanged(); // causes the page to get automatically refreshed
        }
    }
</EditForm>
}

@if (students != null && mode == MODE.Delete) // Delete form
{
    <EditForm Model="@student" OnValidSubmit="@HandleDelete">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText placeholder="First Name" id="firstName" @bind-Value="@student.FirstName" />
    <br />
    <InputText placeholder="Last Name" id="lastName" @bind-Value="@student.LastName" />
    <br />
    <button type="submit" value="Delete" class="btn btn-danger">Submit</button>

    @code {
        protected async void HandleDelete()
        {
            string endpoint = $"{baseUrl}api/students/{student.StudentId}";
            await httpClient.DeleteAsync(endpoint);
            await load();
            mode = MODE.None;
            StateHasChanged(); // causes the page to get automatically refreshed
        }
    }
</EditForm>
}


@code {
    Student[] students;
    string baseUrl = "https://localhost:6001/";
    //string baseUrl = "https://localhost:44342/";
    private enum MODE { None, Add, Edit, Delete };
    MODE mode = MODE.None;
    Student s;


    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        students = await httpClient.GetFromJsonAsync<Student[]>($"{baseUrl}api/students");

    }

    protected void Add()
    {
        mode = MODE.Add;
    }
}
